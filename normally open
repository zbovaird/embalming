const int flowSensorPin = 2; // the number of the flow sensor pin
const int solenoidValvePin = 3; // the number of the solenoid control pin

volatile unsigned int flow_frequency = 0; // Measures flow sensor pulses
unsigned long cloopTime;
unsigned long checkTime = 0; // Time at which the solenoid was last toggled
unsigned long lastOpenAttemptTime = 0; // Last time when the solenoid was opened

float baselineFlowRate = -1; // The baseline flow rate, initially unknown
bool solenoidOpen = true; // Current state of the solenoid

void setup() {
  pinMode(flowSensorPin, INPUT_PULLUP);
  pinMode(solenoidValvePin, OUTPUT);
  digitalWrite(solenoidValvePin, HIGH); // Open the solenoid initially
  attachInterrupt(digitalPinToInterrupt(flowSensorPin), flow, RISING);
  Serial.begin(9600);
  cloopTime = millis();
}

void loop() {
  unsigned long currentTime = millis();

  // Measure flow rate every second
  if (currentTime - cloopTime >= 1000) {
    cloopTime = currentTime; // Reset cloopTime to the current time

    // Disable the interrupt while calculating flow rate
    detachInterrupt(digitalPinToInterrupt(flowSensorPin));

    // Calculate flow rate
    float flowRate = (flow_frequency / 7.5) * 60.0; // Replace 7.5 with pulses per liter per minute for your sensor

    // If we don't have a baseline yet, establish one
    if (baselineFlowRate < 0 && flowRate > 0) {
      baselineFlowRate = flowRate;
    }

    // If flow rate drops by 10% of the baseline, close the solenoid
    if (baselineFlowRate >= 0 && flowRate < baselineFlowRate * 0.9 && solenoidOpen) {
      digitalWrite(solenoidValvePin, LOW);
      solenoidOpen = false;
      checkTime = currentTime; // Start the 3-second check timer
      lastOpenAttemptTime = currentTime;
    }

    // Re-enable the interrupt
    flow_frequency = 0; // Reset the frequency counter
    attachInterrupt(digitalPinToInterrupt(flowSensorPin), flow, RISING);
    
    Serial.print("Current flow rate: ");
    Serial.print(flowRate);
    Serial.println(" L/min");
    Serial.print("Baseline flow rate: ");
    Serial.print(baselineFlowRate);
    Serial.println(" L/min");
  }

  // Check to see if we need to attempt to reopen the solenoid every 3 seconds
  if (!solenoidOpen && currentTime - lastOpenAttemptTime >= 3000) {
    lastOpenAttemptTime = currentTime; // Update the last attempt time
    digitalWrite(solenoidValvePin, HIGH); // Attempt to reopen the solenoid
    solenoidOpen = true; // Update state
  }

  // Check if the solenoid has been open for at least 500 ms
  if (solenoidOpen && currentTime - lastOpenAttemptTime >= 500) {
    // Immediately check the flow rate
    detachInterrupt(digitalPinToInterrupt(flowSensorPin)); // Disable the interrupt
    float immediateFlow = (flow_frequency / 7.5) * 60.0; // Same calculation for flow rate
    attachInterrupt(digitalPinToInterrupt(flowSensorPin), flow, RISING); // Re-enable the interrupt
    
    // Check to see if the baseline has been reached or exceeded; need to adjust this value to something higher than 0.9 since flow will be reduced upon clearing the obstruction
    if (immediateFlow < baselineFlowRate * 0.9) {
      // If not, close the solenoid again
      digitalWrite(solenoidValvePin, LOW);
      solenoidOpen = false;
    } else {
      // If baseline flow is restored, keep the solenoid open
      solenoidOpen = true;
    }

    // Reset the frequency counter after checking
    flow_frequency = 0;
  }
}

// Interrupt Service Routine
void flow() {
  flow_frequency++; // Increment the pulse counter
}
